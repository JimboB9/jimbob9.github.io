coord  <- "left_eye_center"
patch_size <- 10
coord_x <- paste(coord, "x", sep="_")
coord_y <- paste(coord, "y", sep="_")
patches <- foreach (i = 1:nrow(d.train), .combine=rbind) %do% {
im  <- matrix(data = im.train[i,], nrow=96, ncol=96)
x   <- d.train[i, coord_x]
y   <- d.train[i, coord_y]
x1  <- (x-patch_size)
x2  <- (x+patch_size)
y1  <- (y-patch_size)
y2  <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) &&
(x1>=1) && (x2<=96) && (y1>=1) && (y2<=96) )
{
as.vector(im[x1:x2, y1:y2])
}
else
{
NULL
}
}
mean.patch <- matrix(data = colMeans(patches),
nrow=2*patch_size+1, ncol=2*patch_size+1)
image(1:21, 1:21, mean.patch[21:1,21:1], col=gray((0:255)/255))
rm(ls=list())
rm(list=ls())
library(MASS)
data(shuttle)
head(shuttle)
glm <- glm(use~., data=shuttle, family="binomial")
glm <- glm(use~., data=shuttle, family=binomial)
glm
options(scipen=100)
glm
glm <- glm(use~ wind, data=shuttle, family=binomial)
glm
coef(glm)
coef(glm)[1]
?shuttle
glm <- glm(use~ wind, data=shuttle, family=binomial)
glm
coef(glm)[2]
exp(coef(glm)[2])
glm2 <- glm(use~ wind+magn, data=shuttle, family=binomial)
glm2
exp(coef(glm2)[2])
relevel(shuttle$use, ref="noauto")
shuttle$use <- relevel(shuttle$use, ref="noauto")
glm2 <- glm(use~ wind+magn, data=shuttle, family=binomial)
glm2
rm(list=ls())
library(datasets)
data(insectSprays)
data(InsectSprays)
library(datasets)
data(InsectSprays)
head(InsectSprays)
pm <- glm(spray ~ count, data=InsectSprays, family="poisson")
pm <- glm(spray ~ count, data=InsectSprays, family=poisson)
library(plyr)
subset <- subset(InsectSprays, spray="A" | spray="B")
subset <- subset(InsectSprays, spray=="A" | spray=="B")
pm <- glm(spray ~ count, data=subset, family=poisson)
summary(InsectSprays)
unique(subset)
pm <- glm(spray ~ count, data=subset, family="poisson")
any(subset$spray < 0)
pm <- glm(count ~ spray, data=subset, family="poisson")
pm
pm <- glm(count ~ spray, data=InsectSpray, family="poisson")
pm
unique(InsectSprays)
pm <- glm(count ~ spray, data=InsectSpray, family="poisson")
pm
pm <- glm(count ~ spray, data=InsectSprays, family="poisson")
pm
exp(coef(pm)[2])
pm <- glm(count ~ I(spray=="A"/spray=="B"), data=InsectSprays, family="poisson")
pm
pm <- glm(count ~ I(spray="A"/spray="B"), data=InsectSprays, family="poisson")
pm
pm <- glm(count ~ spray, data=InsectSprays, family="poisson")
pm
coef(pm)[2]
exp(coef(pm)[2])
exp(coef(pm)[1])
exp(coef(pm)[1])/exp(coef(pm[2]))
exp(coef(pm)[1])/exp(coef(pm[2]))
exp(coef(pm)[[1]])/exp(coef(pm[[2]]))
coef(pm[2][1]
)
coef(pm[2][1])
coef(pm[2][2])
coef(pm[2])
coef(pm[2])
pm
exp(coef(pm)[[1]])/exp(coef(pm)[[2]])
(coef(pm)[[1]])/(coef(pm)[[2]])
subset <- subset(InsectSprays, spray=="A" | spray=="B")
pm <- glm(count== ~ spray, data=subset, family="poisson")
pm
pm <- glm(count ~ spray, data=subset, family="poisson")
pm
pm <- glm(count ~ sprayA, data=subset, family="poisson",
offset=log(sprayB))
pm <- glm(count ~ spray, data=subset, family="poisson",
)
)
pm
exp((coef(pm)[[1]])/(coef(pm)[[2]]))
options(scipen=100)
exp((coef(pm)[[1]])/(coef(pm)[[2]]))
(coef(pm)[[1]])/(coef(pm)[[2]])
pm <- glm(count ~ spray, data=InsectSprays, family="poisson",
)
pm
(coef(pm)[[1]])/(coef(pm)[[2]])
exp(coef(pm)[[1]])/exp(coef(pm)[[2]])
View(InsectSprays)
as.factor(InsectSprays$spray)
relevel(InsectSprays$spray, ref="B")
pm <- glm(count ~ spray, data=InsectSprays, family="poisson",
)
pm
relevel(InsectSprays$spray, ref="B")
InsectSprays$spray <- relevel(InsectSprays$spray, ref="B")
pm <- glm(count ~ spray, data=InsectSprays, family="poisson",
)
pm
exp(coef(pm)[[2]])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
splx <- x*(x>0)
splx
predict(lm(y ~ x + splx))
coef(lm(y ~ x + splx))
library(dplyr)
library(ggplot2)
data <- read.csv("./Data Science/Reproducable Research/activity.csv")
by_day <- group_by(data, date)
total_steps <- summarize(by_day, total = sum(steps, na.rm=T))
ggplot(total_steps,aes(x=total))+ geom_histogram()+
scale_x_discrete(limits=date)
ggplot(total_steps,aes(x=total))+ geom_histogram()+
scale_x_discrete(date)
ggplot(total_steps,aes(x=total))+ geom_histogram()+
scale_x_discrete(date)
ggplot(total_steps,aes(x=total))+ geom_histogram()+
scale_x_discrete(labels=date)
ggplot(total_steps,aes(x=total))+ geom_histogram()+
scale_x_discrete(labels=date)
ggplot(total_steps,aes(x=total))+ geom_histogram(breaks=date)+
scale_x_discrete(labels=date)
ggplot(total_steps,aes(x=total))+ geom_histogram(breaks=date)+
scale_x_discrete(levels=date)
ggplot(total_steps,aes(x=date, y=total))+ geom_histogram(breaks=date)+
)
ggplot(total_steps,aes(x=date, y=total))+ geom_histogram()
ggplot(total_steps,aes(x=total, y=date))+ geom_histogram()
ggplot(total_steps,aes(x=total, y=date))+ geom_histogram()
ggplot(total_steps,aes(x=total))+ geom_histogram()
hist(total_steps$total, breaks=totalsteps$date)
hist(total_steps$total, breaks=total_steps$date)
```
hist(total_steps$total, breaks=61)
hist(total_steps$total, breaks=60)
hist(total_steps$total, breaks=C(1:61))
hist(total_steps$total, breaks=c(1:61))
hist(total_steps$total, breaks=c(1:61))
hist(total_steps$total)
total_steps$date <- as.Date(total_steps$date, "%Y-%m-%d")
ggplot(total_steps,aes(x=total))+ geom_histogram()
ggplot(total_steps,aes(x=date))+ geom_histogram()
ggplot(total_steps,aes(x=date, y=total))+ geom_histogram()
hist(total_steps$total, breaks=total_steps$date)
ggplot(total_steps,aes(x=date))+ geom_histogram()
qplot(total_steps)
qplot(as.data.frame(total_steps))
hist(total_steps$total, breaks=c(1:61))
hist(total_steps$total, breaks=1)
hist(total_steps$total, breaks=30)
hist(total_steps$total, breaks=31)
hist(total_steps$total, breaks=100)
hist(total_steps$total)
hist(total_steps$total, breaks=c(10))
hist(total_steps$total, breaks=20)
hist(total_steps$total, breaks=20,xlab="Total number of steps", main="Total number of steps per day")
meansteps <- mean(total_steps$total)
mediansteps <- median(total_steps$total)
data <- read.csv("./Data Science/Reproducable Research/activity.csv")
data <- read.csv(paste0(getwd(),"/Data Science/Reproducable Research/activity.csv"))
data <- read.csv(paste0("./Data Science/Reproducable Research/activity.csv")
)
getwd()
data <- read.csv(paste0(getwd(),"/Data Science/Reproducable Research/activity.csv"))
round(mediansteps, 2)
mediansteps
meansteps
meansteps
round(meansteps,1)
View(data)
by_5min <- group_by(data, interval)
View(by_day)
View(by_5min)
by_5min <- group_by(data, interval)
mean_steps <- summarise(by_5min, mean=mean(steps,rm.na=T)
)
mean_steps
mean_steps <- summarise(by_5min, mean=mean(steps,na.rm=T))
mean_steps
summary(mean_steps)
View(mean_steps)
plot(mean_steps$interval, mean_steps$mean, type="l")
plot(mean_steps$interval, mean_steps$mean, type="l", main="Average      number of steps per interval", xlab="Time interval", ylab="Average number of steps")
View(mean_steps)
which.max(mean_steps$mean )
max_interval <- mean_steps[which.max(mean_steps$mean),2]
max_interval
max_interval <- mean_steps[which.max(mean_steps$mean),1]
max_interval
max_interval <- mean_steps[which.max(mean_steps$mean)]
max_interval
max_interval <- mean_steps[which.max(mean_steps$mean),]
max_interval
colSums(is.na(data))
dim(data)[2]
View(data)
data.na.rm <- data
for(i in dim(data)[1]
if(is.na(data[i,1])) {data.na.rm[i,1] <- mean(subset(data, date==data[i,2])$steps)}
data.na.rm <- data
for(i in dim(data)[1]) {
if(is.na(data[i,1])) {data.na.rm[i,1] <- mean(subset(data, date==data[i,2])$steps)}
}
colSums(is.na(data.na.rm))
subset(data, date=="2012-10-01)
)
)
subset(data, date=="2012-10-01")
data.na.rm <- data
for(i in dim(data)[1]) {
if(is.na(data[i,1])) {data.na.rm[i,1] <- mean(subset(data, interval==data[i,3])$steps)}
}
colSums(is.na(data.na.rm))
View(mean_steps)
data.na.rm <- data
for(i in dim(data)[1]) {
if(is.na(data[i,1])) {data.na.rm[i,1] <- mean_steps[which(mean_steps$interval==data[i,3]),2]}
}
colSums(is.na(data.na.rm))
data.na.rm <- data
for(i in dim(data)[1]) {
if(is.na(data[i,1])) {data.na.rm[i,1] <- mean_steps[which(mean_steps$interval==data[i,3]),2]}
}
colSums(is.na(data.na.rm))
colSums(is.na(mean_steps))
data.na.rm <- data
for(i in 1:dim(data)[1]) {
if(is.na(data[i,1])) {data.na.rm[i,1] <- mean_steps[which(mean_steps$interval==data[i,3]),2]}
}
colSums(is.na(data.na.rm))
```{r fig.width=7, fig.height=6}
by_dayr <- group_by(data.na.rm, date)
total_stepsr <- summarize(by_dayr, total = sum(steps, na.rm=T))
hist(total_stepsr$total, breaks=20,xlab="Total number of steps", main="Total number of steps per day with NA correction")
```
hist(total_stepsr$total, breaks=20,xlab="Total number of steps", main="Total number of steps per day with NA correction")
hist(total_steps$total, breaks=20,xlab="Total number of steps", main="Total number of steps per day")
options(scipen=3)
library(datasets)
data(mtcars)
mtcars
View(mtcars)
save.image("~/Data Science/Regression Models/mtcars.RData")
load("~/Data Science/Regression Models/mtcars.RData")
View(mtcars)
library(datasets)
data(mtcars)
View(mtcars)
pairs(mtcars)
cor(mtcars)
high_corr <- cor(mtcars)
View(high_corr)
summary(mtcars)
high_corr>0.6
corr <- cor(mtcars)
highcorr[corr>0.7]
highcorr <- corr[corr>0.7]
View(high_corr)
View(corr)
View(high_corr)
View(corr)
highcorr <- corr[abs(corr)>0.7]
View(high_corr)
highcorr <- corr[abs(corr)>0.7]
highcorr
View(corr)
View(mtcars)
mtcars$vs <- factor(mtcars$vs)
View(mtcars)
summary(mtcarss)
summary(mtcars)
unique(mtcars)
unique(mtcars$carb)
unique(mtcars$gear)
mtcars$gear <- factor(mtcars$gear)
mtcars$cyl <- factor(mtcars$cyl)
lm(mgp ~., data=mtcars)
lm(mpg ~., data=mtcars)
fit1 <- lm(mpg ~., data=mtcars)
summary(fit1)
pairs(mtcars)
pairs(mtcars)
lm(mpg ~., data=mtcars)
summary(lm(mpg~., data=mtcars[,-"drat"]))
summary(lm(mpg~., data=mtcars[,"-drat"]))
summary(lm(mpg~., data=mtcars[,-"drat"]))
summary(lm(mpg~., data=mtcars[,-c("drat")]))
summary(lm(mpg~., data=mtcars[,-5]))
summary(lm(mpg~. -1, data=mtcars[,-5]))
summary(lm(mpg~. -1, data=mtcars[,c(-5,-10)]))
summary(lm(mpg~. -1, data=mtcars[,c(-5,-9,-10)]))
summary(lm(mpg~. -1, data=mtcars[,c(-5,-8,-10)]))
summary(lm(mpg~. -1, data=mtcars[,c(-5,-10)]))
mtcars$am <- factor(mtcars$am)
summary(lm(mpg~. -1, data=mtcars[,c(-5,-10)]))
data(mtcars)
corr <- cor(mtcars)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$cyl <- factor(mtcars$cyl)
summary(lm(mpg~. -1, data=mtcars[,c(-5,-10)]))
summary(lm(mpg~. -1, data=mtcars[,c(-5,-8,-10)]))
summary(lm(mpg~. -1, data=mtcars[,c(-5,-8,-10,-11)]))
fit1 <- lm(mpg ~., data=mtcars)
summary(fit1)
plot(fit1)
par(mfrow = c(2, 2))
plot(fit1)
fit2 <- lm(mpg~. -1, data=mtcars[,c(-5,-8,-10,-11)])
summary(fit2)
plot(fit2)
fit1 <- lm(mpg ~., data=mtcars)
summary(fit1)
fit2 <- lm(mpg~., data=mtcars[,c(-5,-8,-10,-11)])
summary(fit2)
fit2 <- lm(mpg~., data=mtcars[,c(-5,-10)])
summary(fit2)
fit3 <- lm(mpg~., data=mtcars[,c(-2,-5,-7,-8,-10,-11)])
summary(fit3)
lm(mpg~., data=mtcars[,c(-2,-5,-10)])
summary(lm(mpg~., data=mtcars[,c(-2,-5,-10)]))
summary(lm(mpg~., data=mtcars[,c(-2,-5,-8,-10,-11)]))
fit3 <- lm(mpg~., data=mtcars[,c(-2,-5,-8,-10,-11)])
summary(fit3)
fit3$confint
str(fit3)
fit3$coefficients
plot(fit3)
plot(fit3, main="Diagnostic Plot")
plot(fit3)
influence.measures(fit3)
load(swirl)
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
swirl()
View(out2)
fit <- lm(y~x, out2)
plot(fit, which = 1)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which = 1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sqrt(resid(fit)/50)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,wich=3)
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit)[1])
head(rstudent(fit))
dy <- predict(fitno,out2)-predict(fit,out2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
library(swirl)
swirl()
simbias <- function(seed=8765){
# The default seed guarantees a nice histogram. This is the only
# reason that accepting the default, x1c <- simbias(), is required in the lesson.
# The effect will be evident with other seeds as well.
set.seed(seed)
temp <- rnorm(100)
# Point A
x1 <- (temp + rnorm(100))/sqrt(2)
x2 <- (temp + rnorm(100))/sqrt(2)
x3 <- rnorm(100)
# Function to simulate regression of y on 2 variables.
f <- function(k){
# Point B
y <- x1 + x2 + x3 + .3*rnorm(100)
# Point C
c(lm(y ~ x1 + x2)$coef[2],
lm(y ~ x1 + x3)$coef[2])
}
# Point D
sapply(1:150, f)
}
x1c <- simbias()
View(x1c)
apply(x1x,1,mean)
apply(x1c,1,mean)
fit1 <- lm(Fertility ~ Agriculture)
fit1 <- lm(Fertility ~ Agriculture, data=swiss)
fit3 <- lm(Fertility ~ Agriculture+Examination+Education, data=swiss)
anova(fit1,fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3)/2
)
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43)
pf(n/d,2,43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum~ravenScore, family = binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
download.file("http://tutorial-haartraining.googlecode.com/svn/trunk/data/negatives/",paste0(getwd(),"Python\hand"))
download.file("http://tutorial-haartraining.googlecode.com/svn/trunk/data/negatives/",paste0(getwd(),"Python/hand"))
download.file("http://tutorial-haartraining.googlecode.com/svn/trunk/data/negatives/",paste0(getwd(),"/Python/hand"))
download.file("http://tutorial-haartraining.googlecode.com/svn/trunk/data/negatives/",paste0(getwd(),"/Python/hand"),method, quiet = FALSE, mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"))
download.file("http://tutorial-haartraining.googlecode.com/svn/trunk/data/negatives/",paste0(getwd(),"/Python/hand"), quiet = FALSE, mode = "w",
cacheOK = TRUE,
extra = getOption("download.file.extra"))
library(datasets)
library(ggplot2)
data("cars")
reg <- lm(dist ~ speed + I(speed^2) -1, data=cars)
summary(reg)
predict(reg, data.frame(speed=10))
pred <- predict(reg)
qplot(x=speed, y=dist, data=cars, geom=c("point", "smooth"),
method="lm", formula=y~x+I(x^2)-1, se=F,
main="Stopping Distance of 1920s cars",
xlab = "MPH", ylab = "FT" )
library(datasets)
library(ggplot2)
data("cars")
qplot(x=speed, y=dist, data=cars, geom=c("point", "smooth"),
method="lm", formula=y~x+I(x^2)-1, se=F,
main="Stopping Distance of 1920s cars",
xlab = "MPH", ylab = "FT" )
qplot(x=speed, y=dist, data=cars, geom=c("point", "smooth"),
method="lm", formula=y~x+I(x^2)-1, se=F,
main="Stopping Distance of 1920s cars",
xlab = "MPH", ylab = "FT" )
install.packages("devtools")
library(devtools)
version
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv/slidify')
install_github('slidify', 'ramnathv')
remove.packages("stringi", lib="~/R/win-library/3.2")
install_github('slidify', 'ramnathv')
install.packages("stringi")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
library(devtools)
install_github("slidify", "ramnathv")
?install_github
library(slidify)
setwd("~/Data Science/Data Products")
setwd("~/Data Science/Data Products/QuickGatsby")
author("QuickGatsby")
slidify("Index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
install_github("slidifyLibraries", "ramnathv")
slidify("index.Rmd")
browseURL("index.Rm")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
